Author: Justin Gagne
Date: July 4, 2014
File: ex22.txt
Description: Review Exercise... Compile a list of all the symbols that have been used previously, and memorize it all.

ex1.py:
- print "Some text" ; prints string to console
- # a comment ; denotes a comment in code

ex3.py:
- + ; addition
- - ; subtraction
- * ; multiplication
- / ; division
- % ; modulo
- True/False ; boolean values
- <, <=, >=, > ; comparison operators

ex4.py:
- cars = 100 ; variable declaration and assignment
- print "There are", cars, "available." ; similar to cout << "There are " << cars << " available." in C++

ex5.py:
- print "Let's talk about %s." % name ; string formatter, %s is replaced by contents of name
- print "If I add %d, %d, and %d, I get %d." % (age, height, weight, age + height + weight) ; number formatter, need () for multiple params

ex6.py:
- %r is general-purpose / debugging formatter
- print w + e ; another way of contanetaing strings

ex7.py:
- print "." * 10 ; prints ..........
- print "Some text", ; prints without \n (similar to print in other languages)
- print "Some other text" ; prints with \n (similar to println)

ex9.py:
- print """
HOLY CRAP
THIS IS 2 LINES
""" ; triple quotation marks is line-entry string

ex11.py:
- raw_input() grabs user input with no prompt
- age = int(raw_input()) ; converts user input to integer and stores in age variable

ex12.py:
- age = raw_input("How old are you? ") ; prompts user for age and stores result in variable

ex13.py:
- from sys import argv ; import code to allow user to user command line arguments (e.g. python ex13.py arg1 arg2)
- script, first, second = argv ; unpack command line arguments so we can use their values (e.g. script = ex13.py, first = arg1, second = arg2)

ex15.py:
- cur_file = open(filename) ; loads file object into cur_file
- print cur_file.read() ; prints contents of the file
- cur_file.close() ; closes the file once we're done with it
- can also grab user input filename with filename = raw_input("> ")

ex16.py:
- target = open(filename, 'w') ; open file in write mode, which clears file before writing... 'a' for append, 'r' for read also available
- target.write("some text\n") ; writes text to the file

ex17.py:
- from os.path import exists ; import exists, returns True if filename exists, False otherwise
- indata = open(from_file).read() ; neat trick for copying file contents into a variable without having to close the file manually later
- len(indata) ; returns length of string
- open(to_file, 'w').write(indata) ; neat trick for copying string to file without having to close it manually later

ex18.py:
- def print_two(arg1, arg2):
      print "arg1: %r, arg2: %r" % (arg1, arg2) ; define a function taking two params; note the def, the colon, and the indentation

ex19.py:
- cheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000) ; calls a function called cheese_and_crackers with var + math params

ex20.py:
- f.seek(0) ; return to the top of the file (i.e. move the caret to position 0)
- f.readline() ; reads from current seek position to the next \n character (i.e. reads one line and moves seek to new line)
- current_line += 1 ; increment current_line by 1

ex21.py:
- return a + b ; placed in a function with params a and b, will return the value of a + b to the caller of the function (e.g. sum = add(1, 2))